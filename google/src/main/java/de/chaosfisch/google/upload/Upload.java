/**************************************************************************************************
 * Copyright (c) 2014 Dennis Fischer.                                                             *
 * All rights reserved. This program and the accompanying materials                               *
 * are made available under the terms of the GNU Public License v3.0+                             *
 * which accompanies this distribution, and is available at                                       *
 * http://www.gnu.org/licenses/gpl.html                                                           *
 *                                                                                                *
 * Contributors: Dennis Fischer                                                                   *
 **************************************************************************************************/

/**
 * This class is generated by jOOQ
 */
package de.chaosfisch.google.upload;

import de.chaosfisch.google.account.AccountModel;
import de.chaosfisch.google.account.PersistentCookieStore;
import de.chaosfisch.google.playlist.PlaylistModel;
import de.chaosfisch.google.upload.metadata.License;
import de.chaosfisch.google.upload.metadata.Metadata;
import de.chaosfisch.google.upload.metadata.Monetization;
import de.chaosfisch.google.upload.metadata.Social;
import de.chaosfisch.google.upload.permissions.*;
import javafx.collections.ObservableList;
import org.jetbrains.annotations.NonNls;

import java.io.File;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

public class Upload {

	private final CopyOnWriteArrayList<PlaylistModel> playlists = new CopyOnWriteArrayList<>();

	private Social       social       = new Social();
	private Status       status       = Status.WAITING;
	private Monetization monetization = new Monetization();
	private Permissions  permissions  = new Permissions();
	private Metadata metadata;

	private String        id;
	private File          file;
	private String        uploadurl;
	private LocalDateTime dateTimeOfStart;
	private int           order;
	private LocalDateTime dateTimeOfRelease;
	private boolean       pauseOnFinish;
	private String        videoid;
	private File          enddir;
	private File          thumbnail;

	private AccountModel account;

	public Upload() {
	}

	public Upload(final String id) {
		this.id = id;
	}

	public Upload(final AccountModel account, final File file) {
		if (null == account) {
			throw new IllegalArgumentException(Validation.ACCOUNT);
		}
		this.account = account;
		setFile(file);
	}

	public int getOrder() {
		return order;
	}

	public void setOrder(final int order) {
		this.order = order;
	}

	public String getId() {
		return id;
	}

	public void setId(final String id) {
		this.id = id;
	}

	public File getFile() {
		return file;
	}

	public void setFile(final File file) {
		if (null == file || !file.exists()) {
			throw new IllegalArgumentException(Validation.FILE);
		}
		this.file = file;
	}

	public String getUploadurl() {
		return uploadurl;
	}

	public void setUploadurl(final String uploadurl) {
		this.uploadurl = uploadurl;
	}

	public LocalDateTime getDateTimeOfStart() {
		return dateTimeOfStart;
	}

	public void setDateTimeOfStart(final LocalDateTime dateTimeOfStart) {
		if (null == dateTimeOfStart || dateTimeOfStart.isBefore(LocalDateTime.now())) {
			this.dateTimeOfStart = null;
		} else {
			this.dateTimeOfStart = dateTimeOfStart;
		}
	}

	public LocalDateTime getDateTimeOfRelease() {
		return dateTimeOfRelease;
	}

	@SuppressWarnings("MagicNumber")
	public void setDateTimeOfRelease(final LocalDateTime dateTimeOfRelease) {
		if (null == dateTimeOfRelease || dateTimeOfRelease.isBefore(LocalDateTime.now())) {
			this.dateTimeOfRelease = null;
		} else {
			final int mod = dateTimeOfRelease.getMinute() % 30;
			dateTimeOfRelease.plusMinutes(16 > mod ? -mod : 30 - mod)
					.getMinute();
			this.dateTimeOfRelease = dateTimeOfRelease;
		}
	}

	public boolean isPauseOnFinish() {
		return pauseOnFinish;
	}

	public void setPauseOnFinish(final boolean pauseOnFinish) {
		this.pauseOnFinish = pauseOnFinish;
	}

	public String getVideoid() {
		return videoid;
	}

	public void setVideoid(final String videoid) {
		this.videoid = videoid;
	}

	public File getEnddir() {
		return enddir;
	}

	public void setEnddir(final File enddir) {
		if (null != enddir && !enddir.exists()) {
			throw new IllegalArgumentException(Validation.ENDDIR);
		}
		this.enddir = enddir;
	}

	public File getThumbnail() {
		return thumbnail;
	}

	public void setThumbnail(final File thumbnail) {
		if (null != thumbnail) {
			if (!thumbnail.exists()) {
				throw new IllegalArgumentException(Validation.THUMBNAIL);
			} else if (Validation.MAX_THUMBNAIL_SIZE < thumbnail.length()) {
				throw new IllegalArgumentException(Validation.THUMBNAIL_SIZE);
			}
		}
		this.thumbnail = thumbnail;
	}

	public Social getSocial() {
		return social;
	}

	public void setSocial(final Social social) {
		this.social = social;
	}

	public Status getStatus() {
		return status;
	}

	public void setStatus(final Status status) {
		this.status = status;
	}

	public Monetization getMonetization() {
		return monetization;
	}

	public void setMonetization(final Monetization monetization) {
		this.monetization = monetization;
	}

	public Permissions getPermissions() {
		return permissions;
	}

	public void setPermissions(final Permissions permissions) {
		this.permissions = permissions;
	}

	public Metadata getMetadata() {
		return metadata;
	}

	public void setMetadata(final Metadata metadata) {
		this.metadata = metadata;
	}

	public AccountModel getAccount() {
		return account;
	}

	public void setAccount(final AccountModel account) {
		this.account = account;
	}

	public List<PlaylistModel> getPlaylists() {
		return new ArrayList<>(playlists);
	}

	public void setPlaylists(final List<PlaylistModel> playlists) {
		this.playlists.clear();
		this.playlists.addAll(playlists);
	}

	@Override
	public int hashCode() {
		return null != id ? id.hashCode() : 0;
	}

	@Override
	public boolean equals(final Object obj) {
		if (this == obj) {
			return true;
		}
		if (!(obj instanceof Upload)) {
			return false;
		}

		final Upload upload = (Upload) obj;

		return !(null != id ? !id.equals(upload.id) : null != upload.id);
	}

	@NonNls
	@Override
	public String toString() {
		return "Upload{" + "id='" + id + '\'' + ", file=" + file + ", uploadurl='" + uploadurl + '\'' + ", videoid='" + videoid + '\'' + '}';
	}

	public String getMetadataTitle() {
		return metadata.getTitle();
	}

	public void setMetadataTitle(final String metadataTitle) {
		metadata.setTitle(metadataTitle);
	}

	public String getMetadataDescription() {
		return metadata.getDescription();
	}

	public void setMetadataDescription(final String metadataDescription) {
		metadata.setDescription(metadataDescription);
	}

	public String getMetadataKeywords() {
		return metadata.getKeywords();
	}

	public void setMetadataKeywords(final String metadataKeywords) {
		metadata.setKeywords(metadataKeywords);
	}

	public String getSocialMessage() {
		return social.getMessage();
	}

	public void setSocialMessage(final String socialMessage) {
		social.setMessage(socialMessage);
	}

	public String getMonetizationTitle() {
		return monetization.getTitle();
	}

	public void setMonetizationTitle(final String monetizationTitle) {
		monetization.setTitle(monetizationTitle);
	}

	public String getMonetizationDescription() {
		return monetization.getDescription();
	}

	public void setMonetizationDescription(final String monetizationDescription) {
		monetization.setDescription(monetizationDescription);
	}

	public String getMonetizationCustomId() {
		return monetization.getCustomId();
	}

	public void setMonetizationCustomId(final String monetizationCustomId) {
		monetization.setCustomId(monetizationCustomId);
	}

	public String getMonetizationNotes() {
		return monetization.getNotes();
	}

	public void setMonetizationNotes(final String monetizationNotes) {
		monetization.setNotes(monetizationNotes);
	}

	public String getMonetizationTmsid() {
		return monetization.getTmsid();
	}

	public void setMonetizationTmsid(final String monetizationTmsid) {
		monetization.setTmsid(monetizationTmsid);
	}

	public String getMonetizationEidr() {
		return monetization.getEidr();
	}

	public String getMonetizationTitleepisode() {
		return monetization.getTitleepisode();
	}

	public void setMonetizationTitleepisode(final String monetizationTitleepisode) {
		monetization.setTitleepisode(monetizationTitleepisode);
	}

	public String getMonetizationSeasonNb() {
		return monetization.getSeasonNb();
	}

	public void setMonetizationSeasonNb(final String monetizationSeasonNb) {
		monetization.setSeasonNb(monetizationSeasonNb);
	}

	public String getMonetizationEpisodeNb() {
		return monetization.getEpisodeNb();
	}

	public void setMonetizationEpisodeNb(final String monetizationEpisodeNb) {
		monetization.setEpisodeNb(monetizationEpisodeNb);
	}

	public Visibility getPermissionsVisibility() {
		return permissions.getVisibility();
	}

	public boolean isSocialFacebook() {
		return social.isFacebook();
	}

	public boolean isSocialTwitter() {
		return social.isTwitter();
	}

	public boolean isSocialGplus() {
		return social.isGplus();
	}

	public boolean isMonetizationClaim() {
		return monetization.isClaim();
	}

	public License getMetadataLicense() {
		return metadata.getLicense();
	}

	public boolean isMonetizationPartner() {
		return monetization.isPartner();
	}

	public ClaimOption getMonetizationClaimoption() {
		return monetization.getClaimoption();
	}

	public boolean isMonetizationOverlay() {
		return monetization.isOverlay();
	}

	public boolean isMonetizationTrueview() {
		return monetization.isTrueview();
	}

	public boolean isMonetizationInstream() {
		return monetization.isInstream();
	}

	public boolean isMonetizationInstreamDefaults() {
		return monetization.isInstreamDefaults();
	}

	public boolean isMonetizationProduct() {
		return monetization.isProduct();
	}

	public Syndication getMonetizationSyndication() {
		return monetization.getSyndication();
	}

	public ClaimType getMonetizationClaimtype() {
		return monetization.getClaimtype();
	}

	public Asset getMonetizationAsset() {
		return monetization.getAsset();
	}

	public String getMonetizationIsan() {
		return monetization.getIsan();
	}

	public void setMonetizationIsan(final String monetizationIsan) {
		monetization.setIsan(monetizationIsan);
	}

	public boolean isPermissionsEmbed() {
		return permissions.isEmbed();
	}

	public boolean isPermissionsRate() {
		return permissions.isRate();
	}

	public boolean isPermissionsCommentvote() {
		return permissions.isCommentvote();
	}

	public Comment getPermissionsComment() {
		return permissions.getComment();
	}

	public boolean isPermissionsAgeRestricted() {
		return permissions.isAgeRestricted();
	}

	public boolean isPermissionsPublicStatsViewable() {
		return permissions.isPublicStatsViewable();
	}

	public ThreeD getPermissionsThreedD() {
		return permissions.getThreedD();
	}

	public String getCategoryTerm() {
		return metadata.getCategoryTerm();
	}

	public String getCategoryLabel() {
		return metadata.getCategoryLabel();
	}

	public String getCategoryScheme() {
		return metadata.getCategoryScheme();
	}

	public String getMetadataLicenseIdentifier() {
		return metadata.getLicenseIdentifier();
	}

	public ObservableList<PersistentCookieStore.SerializableCookie> getAccountSerializableCookies() {
		return account.getSerializableCookies();
	}

	public interface Validation {
		int MAX_THUMBNAIL_SIZE   = 2097152;
		int MAX_TITLE_SIZE       = 100;
		int MAX_DESCRIPTION_SIZE = 5000;

		String ACCOUNT                = "accountNull";
		String FILE                   = "fileNullNotExisting";
		String ENDDIR                 = "enddirNotExisting";
		String THUMBNAIL              = "thumbnailNotExsiting";
		String THUMBNAIL_SIZE         = "thumbnailSize";
		String TITLE                  = "titleNull";
		String TITLE_SIZE             = "titleSize";
		String TITLE_CHARACTERS       = "titleCharacters";
		String CATEGORY               = "categoryNull";
		String DESCRIPTION_SIZE       = "descriptionNull";
		String DESCRIPTION_CHARACTERS = "descriptionCharacters";
		String KEYWORD                = "keywordIllegal";
	}
}
