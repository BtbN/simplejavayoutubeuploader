/**************************************************************************************************
 * Copyright (c) 2014 Dennis Fischer.                                                             *
 * All rights reserved. This program and the accompanying materials                               *
 * are made available under the terms of the GNU Public License v3.0+                             *
 * which accompanies this distribution, and is available at                                       *
 * http://www.gnu.org/licenses/gpl.html                                                           *
 *                                                                                                *
 * Contributors: Dennis Fischer                                                                   *
 **************************************************************************************************/

/**
 * This class is generated by jOOQ
 */
package de.chaosfisch.youtube.account;

import de.chaosfisch.data.UniqueObject;
import de.chaosfisch.youtube.playlist.PlaylistDTO;
import de.chaosfisch.youtube.playlist.PlaylistModel;
import javafx.beans.property.SimpleListProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import org.jetbrains.annotations.NotNull;

import java.util.ArrayList;

import static de.chaosfisch.youtube.account.PersistentCookieStore.SerializableCookie;

public class AccountModel implements UniqueObject<AccountDTO>, Comparable<AccountModel> {

	private final SimpleStringProperty                   youtubeId           = new SimpleStringProperty();
	private final SimpleStringProperty                   name                = new SimpleStringProperty();
	private final SimpleStringProperty                   email               = new SimpleStringProperty();
	private final SimpleStringProperty                   refreshToken        = new SimpleStringProperty();
	private final SimpleObjectProperty<AccountType>      type                = new SimpleObjectProperty<>();
	private final SimpleListProperty<PlaylistModel>      playlists           = new SimpleListProperty<>(
			FXCollections.observableArrayList());
	private final SimpleListProperty<SerializableCookie> serializableCookies = new SimpleListProperty<>(
			FXCollections.observableArrayList());
	private final SimpleListProperty<String>             fields              = new SimpleListProperty<>(
			FXCollections.observableArrayList());

	public ObservableList<String> getFields() {
		return fields.get();
	}

	public void setFields(final ObservableList<String> fields) {
		this.fields.set(fields);
	}

	public SimpleListProperty<String> fieldsProperty() {
		return fields;
	}

	public String getEmail() {
		return email.get();
	}

	public void setEmail(final String email) {
		this.email.set(email);
	}

	public SimpleStringProperty emailProperty() {
		return email;
	}

	public String getYoutubeId() {
		return youtubeId.get();
	}

	public void setYoutubeId(final String youtubeId) {
		this.youtubeId.set(youtubeId);
	}

	public SimpleStringProperty youtubeIdProperty() {
		return youtubeId;
	}

	public SimpleStringProperty nameProperty() {
		return name;
	}

	public String getRefreshToken() {
		return refreshToken.get();
	}

	public void setRefreshToken(final String refreshToken) {
		this.refreshToken.set(refreshToken);
	}

	public SimpleStringProperty refreshTokenProperty() {
		return refreshToken;
	}

	public AccountType getType() {
		return type.get();
	}

	public void setType(final AccountType type) {
		this.type.set(type);
	}

	public SimpleObjectProperty<AccountType> typeProperty() {
		return type;
	}

	public ObservableList<PlaylistModel> getPlaylists() {
		return playlists.get();
	}

	public void setPlaylists(final ObservableList<PlaylistModel> playlists) {
		this.playlists.set(playlists);
	}

	public SimpleListProperty<PlaylistModel> playlistsProperty() {
		return playlists;
	}

	public ObservableList<SerializableCookie> getSerializableCookies() {
		return serializableCookies.get();
	}

	public void setSerializableCookies(final ObservableList<SerializableCookie> serializableCookies) {
		this.serializableCookies.set(serializableCookies);
	}

	public SimpleListProperty<SerializableCookie> serializableCookiesProperty() {
		return serializableCookies;
	}

	public String getName() {
		return name.get();
	}

	public void setName(final String name) {
		this.name.set(name);
	}

	@Override
	public String uniqueId() {
		return youtubeId.get();
	}

	@Override
	public AccountDTO toDTO() {
		final ArrayList<PlaylistDTO> playlistDTOs = new ArrayList<>(playlists.getSize());
		playlists.get().forEach(p -> playlistDTOs.add(p.toDTO()));
		return new AccountDTO(youtubeId.get(),
							  name.get(),
							  email.get(),
							  refreshToken.get(),
							  type.get(),
							  playlistDTOs,
							  new ArrayList<>(fields.get()),
							  new ArrayList<>(serializableCookies.get()));
	}

	@Override
	public void fromDTO(final AccountDTO o) {
		setYoutubeId(o.getYoutubeId());
		setName(o.getName());
		setEmail(o.getEmail());
		setRefreshToken(o.getRefreshToken());
		setType(o.getType());
		playlists.clear();

		o.getPlaylists().forEach(p -> {
			final PlaylistModel playlistModel = new PlaylistModel();
			playlistModel.fromDTO(p);
			playlistModel.setAccount(this);
			playlists.add(playlistModel);
		});

		fields.setAll(o.getFields());
		serializableCookies.setAll(o.getSerializableCookies());
	}

	@Override
	public int compareTo(@NotNull final AccountModel o) {
		if (0 > name.get().compareTo(o.name.get())) {
			return -1;
		} else if (0 < name.get().compareTo(o.name.get())) {
			return 1;
		}
		return 0;
	}

	@Override
	public int hashCode() {
		return youtubeId.get().hashCode();
	}

	@Override
	public boolean equals(final Object obj) {
		if (this == obj) {
			return true;
		}
		if (!(obj instanceof AccountModel)) {
			return false;
		}
		final AccountModel that = (AccountModel) obj;
		return youtubeId.get().equals(that.youtubeId.get());
	}

	@Override
	public String toString() {
		return getName();
	}
}
