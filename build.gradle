/*******************************************************************************
 * Copyright (c) 2013 Dennis Fischer.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Public License v3.0+
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/gpl.html
 * 
 * Contributors: Dennis Fischer
 ******************************************************************************/
import com.sun.nio.zipfs.ZipUtils;

def javaFxHome = "${System.properties['java.home']}";

apply plugin: 'izpack'
apply plugin: 'java'
apply plugin: 'application'

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies { 
        classpath 'org.gradle.api.plugins:gradle-izpack-plugin:0.2.1'
	}
	
	buildDir = 'target'
	version = '3.0.0.1'
}

allprojects
{
	sourceCompatibility = 1.7
	targetCompatibility = 1.7
	mainClassName = 'org.chaosfisch.youtubeuploader.SimpleJavaYoutubeUploader'
}

configurations {
	//we do not want to have jfxrt.jar in the classpath when creating the jar,
	//therefore a seperate configuration is required
	providedCompile
	instrument
	izpack
}



dependencies {
	compile 'com.h2database:h2:1.3.170', 'org.apache.httpcomponents:httpclient:4.2.2', 'com.google.inject:guice:3.0', 'org.bushe:eventbus:1+',
			'ch.qos.logback:logback-classic:1+', 'c3p0:c3p0:+', 'org.apache.httpcomponents:httpmime:4.2.2', 
			'com.google.guava:guava:14+', 'com.thoughtworks.xstream:xstream:1+', 'com.google.code.gson:gson:+'
	compile ('org.javalite:activejdbc:1.4.5'){
		exclude group: 'junit', module: 'junit'
	}
	compile files ("/lib/jupidator.jar", "/lib/jfxtras-labs-2.2.-r5-SNAPSHOT.jar")

	providedCompile files("$javaFxHome/lib/jfxrt.jar")
	instrument 'org.javalite:activejdbc:1.4.5', 'org.javalite:activejdbc-instrumentation:1.4.5'
	izpack 'org.codehaus.izpack:izpack-standalone-compiler:4.3.5'
}

repositories {
	maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
	mavenCentral()
}


compileJava {
	//add required JavaFX libs to compile classpath
	sourceSets.main.compileClasspath += configurations.providedCompile
}

run {
	//add required JavaFX libs to runtime classpath
	classpath += configurations.providedCompile
}

jar {
	archiveName = "SimpleJavaYoutubeUploader.jar"
}


izpack {
	new File("$buildDir/assemble/izpack").mkdirs()
	baseDir = file("$buildDir/assemble/izpack")
	installFile = file("/src/main/deploy/install.xml")
	outputFile = file("$buildDir/distributions/simplejavayoutubeuploader-${version}-installer.jar")
	compression = 'deflate'
	compressionLevel = 9
	appProperties = ['app.group': 'SimpleJavaYoutubeUploader', 'app.name': 'Simple Java Youtube Uploader', 'app.title': 'Simple Java Youtube Uploader',
		'app.version': version, 'app.subpath': "Simple Java Youtube Uploader-$version"]
}

task launch4j(type: Exec) {
	new File("$buildDir/launch4j").mkdirs()
	workingDir file("$buildDir/launch4j")
 	commandLine 'C:/Program Files (x86)/Launch4j/launch4jc.exe', file('/src/main/deploy/launch4j.xml')
}

task instrumentAction() {
	doLast { instrument.execute(); }
}

task instrument (type: JavaExec) {
	classpath configurations.instrument.plus(sourceSets.main.output)
	main = "org.javalite.instrumentation.Main"
	jvmArgs "-DoutputDirectory="+sourceSets.main.output.classesDir
}

task javaFXPackager(type:Exec) {
	commandLine = [
		'javafxpackager',
		'-createjar',
		'-srcdir',
		sourceSets.main.output.classesDir,
		'-outdir',
		jar.destinationDir,
		'-outfile',
		jar.archiveName,
		'-appclass',
		mainClassName,
		'-nocss2bin',
		'-classpath',
		configurations.runtime.collect { "lib/" + it.name }.join(' '),
		'-manifestAttrs',
		'Implementation-Title=Simple Java Youtube Uploader 3.0 Nightly,Implementation-Version='+version+',Implementation-Vendor=Dennis Fischer aka CHAOSFISCH,'+
		'Built-By='+System.getProperty('user.name')+',Built-Date='+new Date()+',Built-JDK='+System.getProperty('java.version')
	]
	workingDir = file("$javaFxHome/bin/")
}

task copyTask(type: Copy) {
	from sourceSets.main.output.resourcesDir
	into sourceSets.main.output.classesDir
}

task distribute(type: Zip){
    baseName 'simple-java-youtube-uploader'
	from(jar)
	from("$buildDir/launch4j")
	into("lib") {
		from(project.configurations.runtime)
	}
}


instrumentAction.dependsOn classes
run.dependsOn instrumentAction
jar.dependsOn instrumentAction
distribute.dependsOn javaFXPackager
distribute.dependsOn launch4j
javaFXPackager.dependsOn copyTask
