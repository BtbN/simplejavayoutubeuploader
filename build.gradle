/*
 * Copyright (c) 2013 Dennis Fischer.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Public License v3.0+
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/gpl.html
 *
 * Contributors: Dennis Fischer
 */











def javaFxHome = "${System.properties['java.home']}";

apply plugin: 'java'
apply plugin: 'application'
sourceCompatibility = 1.7
targetCompatibility = 1.7
buildscript {
    version = "3.0.1.1";
}

allprojects {
    mainClassName = 'SimpleJavaYoutubeUploader'
}

configurations {
    //we do not want to have jfxrt.jar in the classpath when creating the jar,
    //therefore a seperate configuration is required
    providedCompile
}

dependencies {
    compile 'ch.qos.logback:logback-classic:1.0.9', 'org.jfxtras:jfxtras-labs:2.2+',
            'com.thoughtworks.xstream:xstream:1.4.3', 'com.google.code.gson:gson:2.2.2',
            'com.cathive.fx:fx-guice:+', 'com.google.guava:guava:14+',
            'com.google.inject:guice:3.0', 'com.google.inject.extensions:guice-assistedinject:3.0',
            'org.hsqldb:hsqldb:+', 'com.h2database:h2:1.3.170'

    compile project('google'), project('persistence'), project('template')

    testCompile 'junit:junit:4.10'

    providedCompile files("$javaFxHome/lib/jfxrt.jar")
}

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "http://maven.mashape.com/releases" }
}


compileJava {
    //add required JavaFX libs to compile classpath
    sourceSets.main.compileClasspath += configurations.providedCompile
}

jar {
    archiveName = "SimpleJavaYoutubeUploader.jar"
}

task launch4j(type: Exec) {
    new File("$buildDir/launch4j").mkdirs()
    workingDir file("$buildDir/launch4j")
    commandLine 'C:/Program Files (x86)/Launch4j/launch4jc.exe', file('/launch4j.xml')
}

task javaFXPackager(type: Exec) {
    commandLine = [
            'C:/Program Files/Java/jdk1.7.0_21/bin/javafxpackager.exe',
            '-createjar',
            '-srcdir',
            sourceSets.main.output.classesDir,
            '-outdir',
            jar.destinationDir,
            '-outfile',
            jar.archiveName,
            '-appclass',
            mainClassName,
            '-nocss2bin',
            '-classpath',
            configurations.runtime.collect { "lib/" + it.name }.join(' '),
            '-manifestAttrs',
            'Implementation-Title=Simple Java Youtube Uploader ' + version + ',Implementation-Version=' + version + ',Implementation-Vendor=Dennis Fischer aka CHAOSFISCH,' +
                    'Built-By=' + System.getProperty('user.name') + ',Built-Date=' + new Date() + ',Built-JDK=' + System.getProperty('java.version')
    ]
}

task copyTask(type: Copy) {
    from sourceSets.main.output.resourcesDir
    into sourceSets.main.output.classesDir
}

task distribute(type: Zip) {
    new File("$buildDir/SimpleJavaYoutubeUploader.vmoptions").createNewFile()
    baseName 'simple-java-youtube-uploader'
    from(jar)
    from("$buildDir/launch4j")
    from("$buildDir/SimpleJavaYoutubeUploader.vmoptions")
    into("lib") {
        from(project.configurations.runtime)
    }
}


distribute.dependsOn javaFXPackager
distribute.dependsOn launch4j
javaFXPackager.dependsOn copyTask